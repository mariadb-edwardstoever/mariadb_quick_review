-- Post Import script 
-- mariadb_quick_review, by Edward Stoever for MariaDB Support

use $SCHEMA_NAME;

set @GB_THRESHOLD = (5 * 1024 * 1024 * 1024); -- BELOW THIS NUMBER DISPLAY IN MB ELSE GB

select RUN_ID into @RUNID from CURRENT_RUN limit 1;
select IS_GALERA into @IS_GALERA from CURRENT_RUN limit 1;
select IS_PRIMARY into @IS_PRIMARY from CURRENT_RUN limit 1;
select IS_REPLICA into @IS_REPLICA from CURRENT_RUN limit 1;

delimiter //
begin not atomic
select PLUGIN_LIBRARY into @AUDIT_PLUGIN from PLUGINS where PLUGIN_NAME='SERVER_AUDIT';
if @AUDIT_PLUGIN='server_audit.so' then -- MariaDB Community audit
  select if(length(VARIABLE_VALUE)=0,0,
  (LENGTH(VARIABLE_VALUE) - LENGTH(REPLACE(VARIABLE_VALUE, ',', '')) + 1)) as RULE_COUNT into @AUDIT_RULE_COUNT
  from GLOBAL_VARIABLES where VARIABLE_NAME='SERVER_AUDIT_EVENTS';

  if @AUDIT_RULE_COUNT is null then set @AUDIT_RULE_COUNT = 0; end if; -- in theory, cannot happen. Just in case.

  insert into `SERVER_STATE` (`SECTION_ID`,`ITEM`,`STATUS`)
    select 1 as `SECTION_ID`, 'AUDIT PLUGIN INSTALLED' as `ITEM`,
    concat(format(@AUDIT_RULE_COUNT,0), if(@AUDIT_RULE_COUNT=1,' event audited',' events audited')) as `STATUS`
    from GLOBAL_VARIABLES where VARIABLE_NAME='SERVER_AUDIT_EVENTS';
end if;
end;
//

delimiter ;

select max(REDO_LOG_OCCUPANCY_PCT),
       max(THREADS_CONNECTED),
       max(RND_NEXT_PER_MIN),
       max(COM_SELECT_PER_MIN),
       max(COM_DML_PER_MIN),
       max(COM_XA_COMMIT_PER_MIN),
       max(SLOW_QUERIES_PER_MIN),
       max(LOCK_CURRENT_WAITS),
       min((1 - (IBP_READS_PER_MIN / IBP_READ_REQUESTS_PER_MIN)) * 100),
       max(MEMORY_USED),
       max(INNODB_BUFFER_POOL_DATA),
       max(BINLOG_COMMITS_PER_MIN),
       max(DATA_WRITES_PER_MIN),
       max(OS_LOG_WRITTEN_PER_MIN),
       max(COM_STMT_PREPARE_PER_MIN),
       max(COM_STMT_EXECUTE_PER_MIN),
       min(QCACHE_QUERIES_IN_CACHE),
       max(QCACHE_FREE_MEMORY),
       max(QCACHE_HITS_PER_MIN),
       max(QCACHE_INSERTS_PER_MIN),
       max(QCACHE_LOWMEM_PRUNES_PER_MIN),
       max(INNODB_HISTORY_LIST_LENGTH)
INTO @TOP_REDO_OCPCY, @TOP_THREADS_CONNECTED, @TOP_RND_NEXT, @TOP_SELECT_MIN, @TOP_DML_MIN, @TOP_XA_COMMITS_MIN, @TOP_SLOW_QUERIES, @TOP_CURRENT_WAITS, @LOW_CACHE_HITS, @TOP_MEMORY_USED, @TOP_BUFFER_POOL_DATA, @BINLOG_COMMITS_MIN, @TOP_DATA_WRITES_MIN, @TOP_OS_LOG_WRITES, @TOP_STMT_PREPARE, @TOP_STMT_EXECUTE, @LOW_QUERIES_IN_CACHE, @TOP_QCACHE_FREE_MEM, @TOP_QCACHE_HITS, @TOP_QCACHE_INSERTS, @TOP_QCACHE_PRUNES, @TOP_HISTORY_LIST_LENGTH
from V_SERVER_PERFORMANCE_PER_MIN;

select count(*) into @PERFORMANCE_SAMPLES from SERVER_PERFORMANCE;
insert into `SERVER_STATE` (`SECTION_ID`,`ITEM`,`STATUS`)
select 4, 'PERFORMANCE SAMPLES COLLECTED',@PERFORMANCE_SAMPLES;

select VARIABLE_VALUE into @MAX_CONN from GLOBAL_VARIABLES where VARIABLE_NAME='MAX_CONNECTIONS';
insert into `SERVER_STATE` (`SECTION_ID`,`ITEM`,`STATUS`)
select 4, 'THREADS CONNECTED / MAX CONNECTIONS',concat(@TOP_THREADS_CONNECTED,' / ',@MAX_CONN);

delimiter //

begin not atomic
if @TOP_REDO_OCPCY is not null then
  insert into `SERVER_STATE` (`SECTION_ID`,`ITEM`,`STATUS`)
  select 4, 'MAX REDO OCCUPANCY PCT IN 1 MIN', @TOP_REDO_OCPCY;
end if;

if @TOP_RND_NEXT is not null and @TOP_RND_NEXT > 0  then
  insert into `SERVER_STATE` (`SECTION_ID`,`ITEM`,`STATUS`)
  select 4, 'MAX ROWS SCANNED IN 1 MIN',@TOP_RND_NEXT;
end if;

if @TOP_SELECT_MIN is not null and @TOP_SELECT_MIN > 0 then
  insert into `SERVER_STATE` (`SECTION_ID`,`ITEM`,`STATUS`)
  select 4, 'MAX SELECT STATEMENTS IN 1 MIN',@TOP_SELECT_MIN;
end if;

if @TOP_DML_MIN is not null and @TOP_DML_MIN > 0 then
  insert into `SERVER_STATE` (`SECTION_ID`,`ITEM`,`STATUS`)
  select 4, 'MAX DML STATEMENTS IN 1 MIN',@TOP_DML_MIN;
end if;

if @BINLOG_COMMITS_MIN is not null and  @BINLOG_COMMITS_MIN > 0 then
  insert into `SERVER_STATE` (`SECTION_ID`,`ITEM`,`STATUS`)
  select 4, 'MAX TXNS WRITTEN TO BINARY LOG 1 MIN',@BINLOG_COMMITS_MIN;
end if;

if @TOP_STMT_PREPARE is not null and  @TOP_STMT_PREPARE > 0 then
  insert into `SERVER_STATE` (`SECTION_ID`,`ITEM`,`STATUS`)
  select 4, 'MAX PREPARED STMTS PREPARED 1 MIN',@TOP_STMT_PREPARE;
end if;

if @TOP_STMT_EXECUTE is not null and  @TOP_STMT_EXECUTE > 0 then
  insert into `SERVER_STATE` (`SECTION_ID`,`ITEM`,`STATUS`)
  select 4, 'MAX PREPARED STMTS EXECUTED 1 MIN',@TOP_STMT_EXECUTE;
end if;

if @TOP_XA_COMMITS_MIN is not null and  @TOP_XA_COMMITS_MIN > 0 then
  insert into `SERVER_STATE` (`SECTION_ID`,`ITEM`,`STATUS`)
  select 4, 'MAX XA COMMITS IN 1 MIN',@TOP_XA_COMMITS_MIN;
end if;

if @TOP_SLOW_QUERIES is not null and  @TOP_SLOW_QUERIES > 0 then
  insert into `SERVER_STATE` (`SECTION_ID`,`ITEM`,`STATUS`)
  select 4, 'MAX SLOW QUERIES IN 1 MIN',@TOP_SLOW_QUERIES;
end if;

if @TOP_CURRENT_WAITS is not null and @TOP_CURRENT_WAITS > 0 then
  insert into `SERVER_STATE` (`SECTION_ID`,`ITEM`,`STATUS`)
  select 4, 'MAX LOCK WAITERS IN 1 MIN',@TOP_CURRENT_WAITS;
end if;

if @TOP_MEMORY_USED is not null and  @TOP_MEMORY_USED > 0 then
  insert into `SERVER_STATE` (`SECTION_ID`,`ITEM`,`STATUS`)
  select 4, 
    if(@TOP_MEMORY_USED < @GB_THRESHOLD,
  'MEMORY USED FOR CONNECTIONS MB',
  'MEMORY USED FOR CONNECTIONS GB'
  ),
  if(@TOP_MEMORY_USED < @GB_THRESHOLD,
    concat(format(@TOP_MEMORY_USED/1024/1024,2),'M'),
    concat(format(@TOP_MEMORY_USED/1024/1024/1024,2),'G')
  );
end if;

insert into `SERVER_STATE` (`SECTION_ID`,`ITEM`,`STATUS`) 
WITH RQ as (select 4 as `SECTION_ID`,'BUFFER CACHE HIT PCT SINCE STARTUP' as `ITEM`,
(select VARIABLE_VALUE from GLOBAL_STATUS where VARIABLE_NAME='INNODB_BUFFER_POOL_READS' limit 1) as `READS`,
(select VARIABLE_VALUE from GLOBAL_STATUS where VARIABLE_NAME='INNODB_BUFFER_POOL_READ_REQUESTS' limit 1) as `READ_REQUESTS`)
select `SECTION_ID`, `ITEM`, format(((1 - (`READS` / `READ_REQUESTS`)) * 100),6) as `PCT` from  RQ;

if @LOW_CACHE_HITS is not null THEN
  insert into `SERVER_STATE` (`SECTION_ID`,`ITEM`,`STATUS`)
  select 4, 'LOWEST BUFFER CACHE HIT PCT 1 MIN',if(@LOW_CACHE_HITS=100,format(@LOW_CACHE_HITS,5), format(@LOW_CACHE_HITS,6));
end if;

/* INNODB PERFORMANCE SECTION START */

if @TOP_DATA_WRITES_MIN is not null and  @TOP_DATA_WRITES_MIN > 0 then
  insert into `SERVER_STATE` (`SECTION_ID`,`ITEM`,`STATUS`)
  select 4, 'MAX INNODB DATA WRITE OPS 1 MIN',@TOP_DATA_WRITES_MIN;
end if;

if @TOP_HISTORY_LIST_LENGTH is not null and @TOP_HISTORY_LIST_LENGTH > 0 then
  insert into `SERVER_STATE` (`SECTION_ID`,`ITEM`,`STATUS`)
  select 4, 'MAX INNODB HISTORY LIST LENGTH',@TOP_HISTORY_LIST_LENGTH;
end if;

-- ignore less than 12,000 bytes
if @TOP_OS_LOG_WRITES is not null and  @TOP_OS_LOG_WRITES > 12000 then
  insert into `SERVER_STATE` (`SECTION_ID`,`ITEM`,`STATUS`)
  select 4, if(@TOP_OS_LOG_WRITES < @GB_THRESHOLD,
    'MAX INNODB LOG WRITES 1 MIN MB',
    'MAX INNODB LOG WRITES 1 MIN GB'),
  if(@TOP_OS_LOG_WRITES < @GB_THRESHOLD,
    concat(format(@TOP_OS_LOG_WRITES/1024/1024,2),'M'),
    concat(format(@TOP_OS_LOG_WRITES/1024/1024/1024,2),'G')
    );
end if;

if @TOP_BUFFER_POOL_DATA is not null and @TOP_BUFFER_POOL_DATA > 0 then
  insert into `SERVER_STATE` (`SECTION_ID`,`ITEM`,`STATUS`)
  select 4, 
  if(@TOP_BUFFER_POOL_DATA < @GB_THRESHOLD,
    'INNODB BUFFER POOL DATA MB',
    'INNODB BUFFER POOL DATA GB'
    ),
  if(@TOP_BUFFER_POOL_DATA < @GB_THRESHOLD,
    concat(format(@TOP_BUFFER_POOL_DATA/1024/1024,2),'M'), 
    concat(format(@TOP_BUFFER_POOL_DATA/1024/1024/1024,2),'G')
  );
end if;

SELECT VARIABLE_VALUE INTO @REDO_LOG_WAITS
  FROM GLOBAL_STATUS
  WHERE variable_name='INNODB_LOG_WAITS';

if  @REDO_LOG_WAITS > 0 then
SELECT VARIABLE_VALUE INTO @REDO_LOG_WAITS
  FROM GLOBAL_STATUS 
  WHERE variable_name='INNODB_LOG_WAITS';
insert into `SERVER_STATE` (`SECTION_ID`,`ITEM`,`STATUS`)  
  select 4,'INNODB REDO LOG WAITS SINCE STARTUP',@REDO_LOG_WAITS;
end if;

select VARIABLE_VALUE into @ALL_ROW_LOCK_WAITS
from GLOBAL_STATUS
WHERE variable_name='INNODB_ROW_LOCK_WAITS';

if @ALL_ROW_LOCK_WAITS > 0 then
select VARIABLE_VALUE into @ALL_ROW_LOCK_WAITS 
from GLOBAL_STATUS 
WHERE variable_name='INNODB_ROW_LOCK_WAITS';
insert into `SERVER_STATE` (`SECTION_ID`,`ITEM`,`STATUS`) 
  select 4, 'INNODB ROW LOCK WAITS SINCE STARTUP', @ALL_ROW_LOCK_WAITS;
end if;

/* INNODB PERFORMANCE SECTION END */

/* QUERY CACHE SECTION START */
if @QUERY_CACHE_ENABLED != 'OFF' AND @QUERY_CACHE_SIZE > 0 then
insert into `SERVER_STATE` (`SECTION_ID`,`ITEM`,`STATUS`)
  select 4, concat('QUERY CACHE IS ',@QUERY_CACHE_ENABLED,', USING MEMORY ',if(@QUERY_CACHE_SIZE < @GB_THRESHOLD,'MB','GB')),
  if(@QUERY_CACHE_SIZE < @GB_THRESHOLD,
    concat(format(@QUERY_CACHE_SIZE/1024/1024,2),'M'), 
    concat(format(@QUERY_CACHE_SIZE/1024/1024/1024,2),'G')
    );
end if;

if @QUERY_CACHE_ENABLED != 'OFF' AND @QUERY_CACHE_SIZE > 0 then

if @LOW_QUERIES_IN_CACHE is not null and  @LOW_QUERIES_IN_CACHE > 0 then
  insert into `SERVER_STATE` (`SECTION_ID`,`ITEM`,`STATUS`)
  select 4, 'LOW QUERIES IN QUERY CACHE',@LOW_QUERIES_IN_CACHE;
end if;

if @TOP_QCACHE_FREE_MEM is not null and  @TOP_QCACHE_FREE_MEM > 0 then
  insert into `SERVER_STATE` (`SECTION_ID`,`ITEM`,`STATUS`)
  select 4, concat('HIGHEST QUERY CACHE FREE MEMORY ',if(@TOP_QCACHE_FREE_MEM < @GB_THRESHOLD,'MB','GB')),
    if(@TOP_QCACHE_FREE_MEM < @GB_THRESHOLD,
    concat(format(@TOP_QCACHE_FREE_MEM/1024/1024,2),'M'), 
    concat(format(@TOP_QCACHE_FREE_MEM/1024/1024/1024,2),'G')
    );
end if;

if @TOP_QCACHE_HITS is not null then
  insert into `SERVER_STATE` (`SECTION_ID`,`ITEM`,`STATUS`)
  select 4, 'MAX QUERY CACHE HITS 1 MIN',@TOP_QCACHE_HITS;
end if;

if @TOP_QCACHE_INSERTS is not null and @TOP_QCACHE_INSERTS > 0 then
  insert into `SERVER_STATE` (`SECTION_ID`,`ITEM`,`STATUS`)
  select 4, 'MAX QUERIES INSERTED INTO QCACHE 1 MIN',@TOP_QCACHE_INSERTS;
end if;

if @TOP_QCACHE_PRUNES is not null and @TOP_QCACHE_PRUNES > 0 then
  insert into `SERVER_STATE` (`SECTION_ID`,`ITEM`,`STATUS`)
  select 4, 'MAX QUERIES REMOVED FROM QCACHE 1 MIN',@TOP_QCACHE_PRUNES;
end if;

end if; 
/* QUERY CACHE SECTION END */

/* GALERA TO SERVER_STATE SECTION START */
if @IS_GALERA='YES' then
select
max(WSREP_FLOW_CONTROL_PAUSED_NS_PER_MIN),max(WSREP_FLOW_CONTROL_RECV_PER_MIN),max(WSREP_FLOW_CONTROL_SENT_PER_MIN),
max(WSREP_LAST_COMMITTED_PER_MIN),max(WSREP_LOCAL_COMMITS_PER_MIN),max(WSREP_RECEIVED_PER_MIN),
max(WSREP_RECEIVED_BYTES_PER_MIN),max(WSREP_REPLICATED_PER_MIN),max(WSREP_REPLICATED_BYTES_PER_MIN),
max(WSREP_REPL_DATA_BYTES_PER_MIN),max(WSREP_REPL_KEYS_PER_MIN),max(WSREP_REPL_KEYS_BYTES_PER_MIN)
INTO
@TOP_FLOW_CONTROL_PAUSED_NS,@TOP_FLOW_CONTROL_RECV,@TOP_FLOW_CONTROL_SENT,
@TOP_LAST_COMMITTED,@TOP_LOCAL_COMMITS,@TOP_RECEIVED,
@TOP_RECEIVED_BYTES,@TOP_REPLICATED,@TOP_REPLICATED_BYTES,
@TOP_REPL_DATA_BYTES,@TOP_REPL_KEYS,@TOP_REPL_KEYS_BYTES
from V_GALERA_PERFORMANCE_PER_MIN;

if @TOP_FLOW_CONTROL_PAUSED_NS is not null and @TOP_FLOW_CONTROL_PAUSED_NS > 0 then
  insert into `SERVER_STATE` (`SECTION_ID`,`ITEM`,`STATUS`)
  select 7, 'FLOW CNTRL: MAX NANOSCNDS IN PAUSED STATE 1 MIN',@TOP_FLOW_CONTROL_PAUSED_NS;
end if;

if @TOP_FLOW_CONTROL_RECV is not null and @TOP_FLOW_CONTROL_RECV > 0 then
  insert into `SERVER_STATE` (`SECTION_ID`,`ITEM`,`STATUS`)
  select 7, 'FLOW CNTRL: MAX PAUSE EVENTS RECVD 1 MIN',@TOP_FLOW_CONTROL_RECV;
end if;

if @TOP_FLOW_CONTROL_SENT is not null and @TOP_FLOW_CONTROL_SENT > 0 then
  insert into `SERVER_STATE` (`SECTION_ID`,`ITEM`,`STATUS`)
  select 7, 'FLOW CONTROL: MAX PAUSE EVENTS SENT 1 MIN',@TOP_FLOW_CONTROL_SENT;
end if;

if @TOP_LAST_COMMITTED is not null and @TOP_LAST_COMMITTED > 0 then
  insert into `SERVER_STATE` (`SECTION_ID`,`ITEM`,`STATUS`)
  select 7, 'MAX WSREP COMMITS 1 MIN',@TOP_LAST_COMMITTED;
end if;

if @TOP_LOCAL_COMMITS is not null and @TOP_LOCAL_COMMITS > 0 then
  insert into `SERVER_STATE` (`SECTION_ID`,`ITEM`,`STATUS`)
  select 7, 'MAX WSREP LOCAL COMMITS 1 MIN',@TOP_LOCAL_COMMITS;
end if;

if @TOP_RECEIVED is not null and @TOP_RECEIVED > 0 then
  insert into `SERVER_STATE` (`SECTION_ID`,`ITEM`,`STATUS`)
  select 7, 'MAX WSREP WRITESETS RECEIVED 1 MIN',@TOP_RECEIVED;
end if;

if @TOP_RECEIVED_BYTES is not null and @TOP_RECEIVED_BYTES > 0 then
  insert into `SERVER_STATE` (`SECTION_ID`,`ITEM`,`STATUS`)
  select 7, 'MAX BYTES OF WRITESETS RECEIVED 1 MIN',@TOP_RECEIVED_BYTES;
end if;

if @TOP_REPLICATED is not null and @TOP_REPLICATED > 0 then
  insert into `SERVER_STATE` (`SECTION_ID`,`ITEM`,`STATUS`)
  select 7, 'MAX WRITESETS REPLICATED TO OTHER NODES 1 MIN',@TOP_REPLICATED;
end if;

if @TOP_REPLICATED_BYTES is not null and @TOP_REPLICATED_BYTES > 0 then
  insert into `SERVER_STATE` (`SECTION_ID`,`ITEM`,`STATUS`)
  select 7, 'MAX BYTES OF WRITESETS TO OTHER NODES 1 MIN',@TOP_REPLICATED_BYTES;
end if;

if @TOP_REPL_DATA_BYTES is not null and @TOP_REPL_DATA_BYTES > 0 then
  insert into `SERVER_STATE` (`SECTION_ID`,`ITEM`,`STATUS`)
  select 7, 'MAX TOTAL SIZE OF DATA REPLICATED 1 MIN',@TOP_REPL_DATA_BYTES;
end if;

if @TOP_REPL_KEYS is not null and @TOP_REPL_KEYS > 0 then
  insert into `SERVER_STATE` (`SECTION_ID`,`ITEM`,`STATUS`)
  select 7, 'MAX TOTAL OF KEYS REPLICATED 1 MIN',@TOP_REPL_KEYS;
end if;

if @TOP_REPL_KEYS_BYTES is not null and @TOP_REPL_KEYS_BYTES > 0 then
  insert into `SERVER_STATE` (`SECTION_ID`,`ITEM`,`STATUS`)
  select 7, 'MAX BYTES OF KEYS REPLICATED 1 MIN',@TOP_REPL_KEYS_BYTES;
end if;
end if;

insert into `SERVER_STATE` (`SECTION_ID`,`ITEM`,`STATUS`)  
  select 6 as `SECTION_ID`, substr(ITEM,1,72) as `ITEM`, substr(STATUS,1,72) as `STATUS` 
  from REVIEW_WARNINGS 
  where `RUN_ID` = @RUNID;

end;
//
delimiter ;
